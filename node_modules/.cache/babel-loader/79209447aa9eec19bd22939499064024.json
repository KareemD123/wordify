{"ast":null,"code":"import tokenService from \"./tokenService\";\nconst BASE_URL = \"/api/users/\";\n\nfunction signup(user) {\n  console.log(\"I made it to the signup\");\n  return fetch(BASE_URL + \"signup\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify(user)\n  }).then(async res => {\n    console.log(\"we got a result! \" + res);\n\n    if (res.ok) {\n      try {\n        let x = await res.json();\n        console.log(x);\n        return x;\n      } catch (err) {\n        console.log(\"this is the catch err\" + err);\n      }\n\n      throw new Error(\"Email already taken!\");\n    }\n  }).then(({\n    token\n  }) => {\n    console.log(\"this is the token part of signup function\" + token);\n    tokenService.setToken(token);\n  }); // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  console.log(creds.email);\n  return fetch(BASE_URL + \"login\", {\n    method: \"POST\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify(creds)\n  }).then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error(\"Bad Credentials!\");\n  }).then(({\n    token\n  }) => tokenService.setToken(token));\n}\n\nfunction test(user) {\n  console.log(\"this is the test function! \" + user);\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login,\n  test,\n  loggedInEmail\n};","map":{"version":3,"sources":["C:/Users/Kareem/wordify3/wordify/src/services/userService.js"],"names":["tokenService","BASE_URL","signup","user","console","log","fetch","method","headers","Headers","body","JSON","stringify","then","res","ok","x","json","err","Error","token","setToken","getUser","getUserFromToken","logout","removeToken","login","creds","email","test","loggedInEmail"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,QAAQ,GAAG,aAAjB;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,SAAOC,KAAK,CAACL,QAAQ,GAAG,QAAZ,EAAsB;AAChCM,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,sBAAgB;AAAlB,KAAZ,CAFuB;AAGhCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAH0B,GAAtB,CAAL,CAKJU,IALI,CAKC,MAAOC,GAAP,IAAe;AACnBV,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBS,GAAlC;;AACA,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,UAAI;AACF,YAAIC,CAAC,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAd;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAYW,CAAZ;AACA,eAAOA,CAAP;AACD,OAJD,CAIE,OAAOE,GAAP,EAAY;AACZd,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0Ba,GAAtC;AACD;;AACD,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF,GAjBI,EAkBJN,IAlBI,CAkBC,CAAC;AAAEO,IAAAA;AAAF,GAAD,KAAe;AACnBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8Ce,KAA1D;AACApB,IAAAA,YAAY,CAACqB,QAAb,CAAsBD,KAAtB;AACD,GArBI,CAAP,CAFoB,CAwBpB;AACA;AACD;;AAED,SAASE,OAAT,GAAmB;AACjB,SAAOtB,YAAY,CAACuB,gBAAb,EAAP;AACD;;AAED,SAASC,MAAT,GAAkB;AAChBxB,EAAAA,YAAY,CAACyB,WAAb;AACD;;AAED,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpBvB,EAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAK,CAACC,KAAlB;AACA,SAAOtB,KAAK,CAACL,QAAQ,GAAG,OAAZ,EAAqB;AAC/BM,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,sBAAgB;AAAlB,KAAZ,CAFsB;AAG/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAee,KAAf;AAHyB,GAArB,CAAL,CAKJd,IALI,CAKEC,GAAD,IAAS;AACb;AACA,QAAIA,GAAG,CAACC,EAAR,EAAY,OAAOD,GAAG,CAACG,IAAJ,EAAP;AACZ,UAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACD,GATI,EAUJN,IAVI,CAUC,CAAC;AAAEO,IAAAA;AAAF,GAAD,KAAepB,YAAY,CAACqB,QAAb,CAAsBD,KAAtB,CAVhB,CAAP;AAWD;;AAED,SAASS,IAAT,CAAc1B,IAAd,EAAoB;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCF,IAA5C;AACD;;AAED,eAAe;AACbD,EAAAA,MADa;AAEboB,EAAAA,OAFa;AAGbE,EAAAA,MAHa;AAIbE,EAAAA,KAJa;AAKbG,EAAAA,IALa;AAMbC,EAAAA;AANa,CAAf","sourcesContent":["import tokenService from \"./tokenService\";\r\n\r\nconst BASE_URL = \"/api/users/\";\r\n\r\nfunction signup(user) {\r\n  console.log(\"I made it to the signup\");\r\n  return fetch(BASE_URL + \"signup\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify(user),\r\n  })\r\n    .then(async (res) => {\r\n      console.log(\"we got a result! \" + res);\r\n      if (res.ok) {\r\n        try {\r\n          let x = await res.json();\r\n          console.log(x);\r\n          return x;\r\n        } catch (err) {\r\n          console.log(\"this is the catch err\" + err);\r\n        }\r\n        throw new Error(\"Email already taken!\");\r\n      }\r\n    })\r\n    .then(({ token }) => {\r\n      console.log(\"this is the token part of signup function\" + token);\r\n      tokenService.setToken(token);\r\n    });\r\n  // The above could have been written as\r\n  //.then((token) => token.token);\r\n}\r\n\r\nfunction getUser() {\r\n  return tokenService.getUserFromToken();\r\n}\r\n\r\nfunction logout() {\r\n  tokenService.removeToken();\r\n}\r\n\r\nfunction login(creds) {\r\n  console.log(creds.email);\r\n  return fetch(BASE_URL + \"login\", {\r\n    method: \"POST\",\r\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n    body: JSON.stringify(creds),\r\n  })\r\n    .then((res) => {\r\n      // Valid login if we have a status of 2xx (res.ok)\r\n      if (res.ok) return res.json();\r\n      throw new Error(\"Bad Credentials!\");\r\n    })\r\n    .then(({ token }) => tokenService.setToken(token));\r\n}\r\n\r\nfunction test(user) {\r\n  console.log(\"this is the test function! \" + user);\r\n}\r\n\r\nexport default {\r\n  signup,\r\n  getUser,\r\n  logout,\r\n  login,\r\n  test,\r\n  loggedInEmail,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}